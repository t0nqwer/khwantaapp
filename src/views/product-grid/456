{$_.take($f(), 12).map((faker, fakerKey) => (
          <div
            key={fakerKey}
            className="intro-y col-span-12 md:col-span-6 lg:col-span-4 xl:col-span-3"
          >
            <div className="box">
              <div className="p-5">
                <div className="h-40 2xl:h-56 image-fit rounded-md overflow-hidden before:block before:absolute before:w-full before:h-full before:top-0 before:left-0 before:z-10 before:bg-gradient-to-t before:from-black before:to-black/10">
                  <img
                    alt="Midone - HTML Admin Template"
                    className="rounded-md"
                    src={faker.images[0]}
                  />
                  {faker.trueFalse[0] && (
                    <span className="absolute top-0 bg-pending/80 text-white text-xs m-5 px-2 py-1 rounded z-10">
                      Featured
                    </span>
                  )}
                  <div className="absolute bottom-0 text-white px-5 pb-6 z-10">
                    <a href="" className="block font-medium text-base">
                      {faker.products[0].name}
                    </a>
                    <span className="text-white/90 text-xs mt-3">
                      {faker.products[0].category}
                    </span>
                  </div>
                </div>
                <div className="text-slate-600 dark:text-slate-500 mt-5">
                  <div className="flex items-center">
                    <Lucide icon="Link" className="w-4 h-4 mr-2" /> Price: $
                    {faker.totals[0]}
                  </div>
                  <div className="flex items-center mt-2">
                    <Lucide icon="Layers" className="w-4 h-4 mr-2" /> Remaining
                    Stock:
                    {faker.stocks[0]}
                  </div>
                  <div className="flex items-center mt-2">
                    <Lucide icon="CheckSquare" className="w-4 h-4 mr-2" />{" "}
                    Status:
                    {faker.trueFalse[0] ? "Active" : "Inactive"}
                  </div>
                </div>
              </div>
              <div className="flex justify-center lg:justify-end items-center p-5 border-t border-slate-200/60 dark:border-darkmode-400">
                <a className="flex items-center text-primary mr-auto" href="#">
                  <Lucide icon="Eye" className="w-4 h-4 mr-1" /> Preview
                </a>
                <a className="flex items-center mr-3" href="#">
                  <Lucide icon="CheckSquare" className="w-4 h-4 mr-1" /> Edit
                </a>
                <a
                  className="flex items-center text-danger"
                  href="#"
                  onClick={() => {
                    setDeleteConfirmationModal(true);
                  }}
                >
                  <Lucide icon="Trash2" className="w-4 h-4 mr-1" /> Delete
                </a>
              </div>
            </div>
          </div>
        ))}





        const xmlSerializer = new XMLSerializer();
        const document = new DOMImplementation().createDocument("http://www.w3.org/1999/xhtml", "html", null);
        const svgNode = document.createElementNS("http://www.w3.org/2000/svg", "svg");
      
        JsBarcode(svgNode, "test", {
          xmlDocument: document,
        });
        const svgText = xmlSerializer.serializeToString(svgNode);
        console.log(svgText);
      
        var canvas = createCanvas();
        const barcode = `${product.product_id}02`;
        console.log(barcode);
        JsBarcode(canvas, barcode, {
          format: "EAN13",
          width: 2,
          height: 50,
          displayValue: false,
        });
      
        const barcode3 = document.getElementById(barcode);
        console.log(barcode3);
        const barcode2 = canvas.toDataURL();
        const printcanvas = createCanvas(300, 240);
        const ctx = printcanvas.getContext("2d");
        ctx.font = "30px";
        ctx.rotate(0);
        let hRatio = printcanvas.width / canvas.width;
        let vRatio = printcanvas.height / canvas.height;
        let ratio = Math.min(hRatio, vRatio);
        ctx.drawImage(canvas, 0, -10, canvas.width, canvas.height, 0, 0, canvas.width * ratio, canvas.height * ratio);
        ctx.fillText(product.design_name, 50, 10);
      
        console.log(barcode2);

        function printDivContent(e) {
          var divElementContents = document.getElementById(e).innerHTML;
          var windows = window.open("", "", "height=400, width=400");
          windows.document.write("<html>");
          windows.document.write("<body >");
          windows.document.write(divElementContents);
          windows.document.write("</body></html>");
          windows.document.close();
          windows.print();
        }
        


        <div className="mt-5">
        <div className="form-inline">
          <label htmlFor="horizontal-form-1" className="form-label sm:w-20">
            รหัส
          </label>
        </div>
        <div className="form-inline mt-5">
          <label htmlFor="horizontal-form-2" className="form-label sm:w-20">
            ชื่อ
          </label>
          <input
            id="horizontal-form-2"
            type="text"
            className="form-control"
            placeholder="เสื้อคอปาดแขนสั้นผ้าขืดยกดอกลาย 12 ราศี"
            onChange={namehandler}
          />
        </div>
        <div className="form-check mt-5 ">
          <div className="flex flex-col sm:flex-row mt-2">
            <div className="form-inline">
              <label htmlFor="horizontal-form-1" className="form-label sm:w-20">
                แบรนด์
              </label>
            </div>
            {brand.map((brand) => (
              <div key={brand.brand_id} className="form-check mr-2">
                <input id={brand.brand_id} className="form-check-input" type="checkbox" value="" onChange={brandhandler} />
                <label className="form-check-label" htmlFor="checkbox-switch-4">
                  {brand.brand_name}
                </label>
              </div>
            ))}
          </div>
        </div>

        <div className="input-form mt-5">
          <div className="form-inline">
            <label htmlFor="horizontal-form-1" className="form-label sm:w-20">
              คำอธิบาย
            </label>
            <textarea
              id="validation-form-6"
              name="comment"
              className="form-control"
              placeholder="Type your comments"
              onChange={descriptionhandler}
            ></textarea>
          </div>
        </div>
        <div className="input-form mt-5">
          <div className="form-inline">
            <label htmlFor="horizontal-form-1" className="form-label sm:w-20">
              ผ้า
            </label>

            <select id="category" className="form-select" onChange={fabrichandler}>
              <option></option>
              {fabric.map((fabric) => (
                <option key={fabric.fabric_id} id={fabric.fabric_id}>
                  {fabric.fabric_type_id === 1 ? "ฝ้าย" : "ไหม"} {fabric.title}
                </option>
              ))}
            </select>
            <button
              className="btn btn-primary mr-1 ml-3"
              onClick={() => {
                setFabricModalPreview(true);
              }}
            >
              <Lucide icon="Plus" className="w-5 h-5" />
            </button>
          </div>
        </div>
        <div className="input-form mt-5">
          <div className="form-inline">
            <label htmlFor="horizontal-form-1" className="form-label sm:w-20">
              ประเภท
            </label>

            <select id="category" className="form-select" onChange={categoryhandler}>
              <option defaultValue></option>
              {category.map((type) => (
                <option key={type.cloth_category_id} id={type.cloth_category_id}>
                  {type.category_name}
                </option>
              ))}
            </select>
            <button
              className="btn btn-primary mr-1 ml-3"
              onClick={() => {
                setTypeModalPreview(true);
              }}
            >
              <Lucide icon="Plus" className="w-5 h-5" />
            </button>
          </div>
        </div>
        <div className="input-form mt-5">
          <div className="form-inline">
            <label htmlFor="horizontal-form-1" className="form-label sm:w-20">
              ช่างแพทเทิร์น
            </label>

            <select id="pattern2" className="form-select" onChange={patternhandler}>
              <option></option>
              {posts.map((post) => (
                <option key={post.pattern_design_id} id={post.pattern_design_id}>
                  {post.pattern_design_name}
                </option>
              ))}
            </select>
            <button
              className="btn btn-primary mr-1 ml-3"
              onClick={() => {
                setPatternModalPreview(true);
              }}
            >
              <Lucide icon="Plus" className="w-5 h-5" />
            </button>
          </div>
        </div>
        <div className="form-inline mt-5">
          <label htmlFor="horizontal-form-1" className="form-label sm:w-20">
            ราคา
          </label>
          <input id="horizontal-form-1" type="text" className="form-control" placeholder="1000" onChange={pricehandler} />
          <span className={`text-danger ml-3 ${priceCheck ? "" : "hidden"}`}> โปรดใส่แค่ตัวเลข</span>
        </div>
      </div>